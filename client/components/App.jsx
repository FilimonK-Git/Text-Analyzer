import React, { useState, useEffect } from "react";
import { createRoot } from "react-dom/client";
import Table from "./Table.jsx";

const App = () => {
  const [words, setWords] = useState("");
  const [emptyTextArea, setEmptyTextArea] = useState(false);
  const [autoGenerated, setAutoGenerated] = useState(false);
  const [autoGeneratedWords, setAutoGeneratedWords] = useState("");
  const [letterCount, setLetterCount] = useState("");
  const [sortedAlpha, setSortedByAlpha] = useState("");
  const [sortedFreq, setSortedByFreq] = useState("");

  const processor = (inputString) => {
    // edge case: what if input is empty or contains non-english-letters, lower case? symbols: space new line...

    // console.log("inputString", inputString);
    if (!inputString) {
      setEmptyTextArea(true);
      setLetterCount("");
      return;
    } else {
      setEmptyTextArea(false);

      let filteredLetters = inputString
        .toLowerCase()
        .split("")
        .filter((char) => /[a-z]/.test(char)); // remove non alphabet chars

      let frequencyDictonary = {};

      filteredLetters.forEach((char) => {
        !frequencyDictonary[char]
          ? (frequencyDictonary[char] = 1)
          : frequencyDictonary[char]++;
      });

      // convert from key:val object to nested array and sort by descending frequency: ex: {a:1, e:3} to [[e,3], [a,1]]
      frequencyDictonary = Object.entries(frequencyDictonary).sort(
        (a, b) => b[1] - a[1]
      );

      setLetterCount(frequencyDictonary);
    }
  };

  const sortByAlpha = () => {
    setSortedByAlpha(letterCount.sort());
    setSortedByFreq("");
  };
  const sortByFreq = () => {
    setSortedByFreq(letterCount.sort((a, b) => b[1] - a[1]));
    setSortedByAlpha("");
  };

  const textGenerator = async () => {
    let randomQuote = await fetch("https://api.quotable.io/quotes/random");
    let randomQuoteJSON = await randomQuote.json();
    setAutoGeneratedWords(randomQuoteJSON[0].content);
    setWords(randomQuoteJSON[0].content);
  };

  return (
    <div>
      {autoGenerated ? (
        <textarea rows="10" cols="25" value={autoGeneratedWords}></textarea>
      ) : (
        <textarea
          rows="10"
          cols="25"
          onChange={(e) => {
            setWords(e.target.value);
          }}
          placeholder="Enter text here..."
        ></textarea>
      )}

      <div>
        <button
          onClick={() => {
            setAutoGenerated(true);
            textGenerator();
          }}
        >
          generate text
        </button>
      </div>

      <div>
        <button
          onClick={() => {
            processor(words);
            setAutoGenerated(false);
          }}
        >
          process
        </button>
      </div>

      {emptyTextArea ? <div>Please insert some text above!</div> : null}

      <div>
        {letterCount ? (
          <Table
            tableData={letterCount}
            sortByAlpha={sortByAlpha}
            sortByFreq={sortByFreq}
          />
        ) : null}
      </div>
    </div>
  );
};

createRoot(document.getElementById("root")).render(<App />);
