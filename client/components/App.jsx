import React, { useState, useEffect } from "react";
import { createRoot } from "react-dom/client";
import Table from "./Table.jsx";

const App = () => {
  const [words, setWords] = useState("");
  const [emptyTextArea, setEmptyTextArea] = useState(false);
  const [noAlphabets, setNoAlphabets] = useState(false);
  const [isAutoGenerated, setIsAutoGenerated] = useState(false);
  const [autoGeneratedWords, setAutoGeneratedWords] = useState("");
  const [countedLetters, setCountedLetters] = useState("");
  const [sortedAlpha, setSortedByAlpha] = useState("");
  const [sortedFreq, setSortedByFreq] = useState("");

  const textProcessor = (inputString) => {
    if (!inputString) {
      // handle edge case when user leaves text area blank
      setEmptyTextArea(true);
      setCountedLetters("");
    } else {
      setEmptyTextArea(false);

      let filteredLetters = inputString
        .toLowerCase()
        .split("")
        .filter((char) => /[a-z]/.test(char)); // filter out non alphabet chars

      if (filteredLetters.length === 0) {
        setNoAlphabets(true); // enables alert that there are no letters found in input
      }

      let frequencyDictonary = {};

      filteredLetters.forEach((char) => {
        !frequencyDictonary[char]
          ? (frequencyDictonary[char] = 1)
          : frequencyDictonary[char]++;
      });

      // convert from key:val object to nested array and sort by descending frequency: ex: {a:1, e:3} to [[e,3], [a,1]]
      frequencyDictonary = Object.entries(frequencyDictonary).sort(
        (a, b) => b[1] - a[1]
      );

      setCountedLetters(frequencyDictonary);
    }
  };

  const sortByAlpha = () => {
    setSortedByAlpha(countedLetters.sort());
    setSortedByFreq("");
  };
  const sortByFreq = () => {
    setSortedByFreq(countedLetters.sort((a, b) => b[1] - a[1]));
    setSortedByAlpha("");
  };

  const textGenerator = async () => {
    let randomQuote = await fetch("https://api.quotable.io/quotes/random");
    let randomQuoteJSON = await randomQuote.json();
    setAutoGeneratedWords(randomQuoteJSON[0].content);
    setWords(randomQuoteJSON[0].content);
  };

  return (
    <div className="mainClass">
      <div className="inputSide">
        {isAutoGenerated ? (
          <textarea
            rows="10"
            cols="30"
            value={autoGeneratedWords}
            onClick={() => {
              setIsAutoGenerated(false); // enables editing auto generated quotes
            }}
          ></textarea>
        ) : (
          <textarea
            rows="10"
            cols="30"
            onChange={(e) => {
              setWords(e.target.value);
              setEmptyTextArea(false);
              setNoAlphabets(false);
            }}
            placeholder="Enter text here..."
          ></textarea>
        )}

        <div className="btnsDiv">
          <button
            className="analyzeBTN"
            onClick={() => {
              textProcessor(words);
              setIsAutoGenerated(false); // enables editing auto generated quotes
            }}
          >
            Analyze
          </button>

          <button
            className="generateBTN"
            onClick={() => {
              setIsAutoGenerated(true);
              textGenerator();
              setEmptyTextArea(false);
              setNoAlphabets(false);
              setCountedLetters("");
            }}
          >
            Generate
          </button>
        </div>
      </div>
      <hr />
      <div className="outputSide">
        {countedLetters && !noAlphabets ? (
          <Table
            tableData={countedLetters}
            sortByAlpha={sortByAlpha}
            sortByFreq={sortByFreq}
          />
        ) : null}
        {noAlphabets ? (
          <div style={{ color: "blue" }}>No english letters found!</div>
        ) : null}
        {emptyTextArea ? (
          <div style={{ color: "red" }}>Please insert some text!</div>
        ) : null}
      </div>
    </div>
  );
};

createRoot(document.getElementById("root")).render(<App />);
